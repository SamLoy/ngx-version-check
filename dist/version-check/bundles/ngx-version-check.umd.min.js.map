{"version":3,"sources":["../../../projects/version-check/src/lib/version-check.service.ts"],"names":["VersionCheckService","http","this","currentHash","version","newVersionAvailable","prototype","startVersionChecking","config","_this","notification","frequency","checkVersion","then","versionCheckInterval","interval","subscribe","stopVersionChecking","unsubscribe","get","Date","getTime","toPromise","response","hasHashChanged","hash","catch","err","console","error","newHash","Object","defineProperty","Injectable","args","providedIn","HttpClient"],"mappings":"sZA4BE,SAAAA,EAAoBC,GAAAC,KAAAD,KAAAA,EAPZC,KAAAC,YAAc,kCACdD,KAAAE,QAAU,qCAGVF,KAAAG,qBAA+B,SAShCL,EAAAM,UAAAC,qBAAA,SAAqBC,GAArB,IAAAC,EAAAP,UAAqB,IAAAM,IAAAA,EAAA,CAA0BE,aAAc,KAAMC,UAAW,OACnFT,KAAKU,aAAaJ,EAAOE,cAAcG,MAAK,WACrCJ,EAAKJ,sBACRI,EAAKK,qBAAuBC,EAAAA,SAASP,EAAOG,WAAWK,WAAU,WAC/DP,EAAKG,aAAaJ,EAAOE,sBAO1BV,EAAAM,UAAAW,oBAAA,WACDf,KAAKY,sBACPZ,KAAKY,qBAAqBI,eAKtBlB,EAAAM,UAAAM,aAAA,SAAaF,GAAb,IAAAD,EAAAP,KAEN,OAAOA,KAAKD,KAAKkB,IAAI,mBAAkB,IAAIC,MAAOC,WAAaC,YAAYT,MAAK,SAACU,GAC/Ed,EAAKJ,oBAAsBI,EAAKe,eAAef,EAAKN,YAAaoB,EAASE,MAGtEhB,EAAKJ,sBACPI,EAAKQ,sBAGDP,GAAcA,QAEnBgB,OAAM,SAAAC,GACPC,QAAQC,MAAMF,EAAK,8BAYf3B,EAAAM,UAAAkB,eAAA,SAAerB,EAAa2B,GAClC,SAAK3B,GAA+B,oCAAhBA,IAIbA,IAAgB2B,GAIzBC,OAAAC,eAAIhC,EAAAM,UAAA,OAAI,KAAR,WACE,OAAOJ,KAAKC,6CAId4B,OAAAC,eAAIhC,EAAAM,UAAA,UAAO,KAAX,WACE,OAAOJ,KAAKE,yCAId2B,OAAAC,eAAIhC,EAAAM,UAAA,sBAAmB,KAAvB,WACE,OAAOJ,KAAKG,mMAjFf4B,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAZLC,EAAAA","sourcesContent":["/**\r\n * Author: Henrik Peinar\r\n * https://blog.nodeswat.com/automagic-reload-for-clients-after-deploy-with-angular-4-8440c9fdd96c\r\n */\r\nimport { Injectable } from '@angular/core'\r\nimport { HttpClient } from '@angular/common/http'\r\nimport { interval, Subscription } from 'rxjs'\r\n\r\nexport interface IVersionCheck {\r\n  /** (Optional) The notification method to call from the client if there is a new version available. */\r\n  notification?: any\r\n\r\n  /** (Required) The frequency in milliseconds (defaults to 30 minutes). */\r\n  frequency: number\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class VersionCheckService {\r\n  // These will be replaced by the post-build.js script\r\n  private currentHash = '{{POST_BUILD_ENTERS_HASH_HERE}}'\r\n  private version = '{{POST_BUILD_ENTERS_VERSION_HERE}}'\r\n\r\n  // Private properties\r\n  private newVersionAvailable: boolean = false\r\n  private versionCheckInterval: Subscription\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  /**\r\n   * Starts the version check interval for the specified frequency.\r\n   * @param config The configuration parameters for the notification function and version check frequency.\r\n   */\r\n  public startVersionChecking(config: IVersionCheck = { notification: null, frequency: 1800000 }) {\r\n    this.checkVersion(config.notification).then(() => {\r\n      if (!this.newVersionAvailable) {\r\n        this.versionCheckInterval = interval(config.frequency).subscribe(() => {\r\n          this.checkVersion(config.notification)\r\n        })\r\n      }\r\n    });\r\n  }\r\n\r\n  /** Stops the version check interval. */\r\n  public stopVersionChecking() {\r\n    if (this.versionCheckInterval) {\r\n      this.versionCheckInterval.unsubscribe()\r\n    }\r\n  }\r\n\r\n  /** Will do the call and check if the hash has changed or not. */\r\n  private checkVersion(notification: any): Promise<void> {\r\n    // Timestamp these requests to invalidate caches\r\n    return this.http.get(`version.json?t=${new Date().getTime()}`).toPromise().then((response: any) => {\r\n      this.newVersionAvailable = this.hasHashChanged(this.currentHash, response.hash)\r\n\r\n      // Stop checking for a new version if a new version is already available\r\n      if (this.newVersionAvailable) {\r\n        this.stopVersionChecking()\r\n\r\n        // Call the consuming client's notification method if one exists\r\n        if (notification) notification()\r\n      }\r\n    }).catch(err => {\r\n      console.error(err, 'Error checking version')\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Checks if hash has changed.\r\n   * This file has the JS hash, if it is a different one than in the version.json\r\n   * we are dealing with version change\r\n   * @param currentHash The current hash of the application.\r\n   * @param newHash The new application hash from the version.json file.\r\n   * @returns Boolean value determining if the hash has changed between the application and version.json file.\r\n   */\r\n  private hasHashChanged(currentHash, newHash): boolean {\r\n    if (!currentHash || currentHash === '{{POST_BUILD_ENTERS_HASH_HERE}}') {\r\n      return false\r\n    }\r\n\r\n    return currentHash !== newHash\r\n  }\r\n\r\n  /** The current build hash of the application */\r\n  get Hash(): string {\r\n    return this.currentHash\r\n  }\r\n\r\n  /** The current version number of the application */\r\n  get Version(): string {\r\n    return this.version\r\n  }\r\n\r\n  /** Flag showing if a new version of the application is available. */\r\n  get NewVersionAvailable(): boolean {\r\n    return this.newVersionAvailable\r\n  }\r\n}\r\n"]}