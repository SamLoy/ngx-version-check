{"version":3,"file":"ngx-version-check.js","sources":["../../../projects/version-check/src/lib/version-check.service.ts","../../../projects/version-check/src/public-api.ts","../../../projects/version-check/src/ngx-version-check.ts"],"sourcesContent":["/**\r\n * Author: Henrik Peinar\r\n * https://blog.nodeswat.com/automagic-reload-for-clients-after-deploy-with-angular-4-8440c9fdd96c\r\n */\r\nimport { Injectable } from '@angular/core'\r\nimport { HttpClient } from '@angular/common/http'\r\nimport { interval, Subscription } from 'rxjs'\r\n\r\nexport interface IVersionCheck {\r\n  /** (Optional) The notification method to call from the client if there is a new version available. */\r\n  notification?: any\r\n\r\n  /** (Required) The frequency in milliseconds (defaults to 30 minutes). */\r\n  frequency: number\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class VersionCheckService {\r\n  // These will be replaced by the post-build.js script\r\n  private currentHash = '{{POST_BUILD_ENTERS_HASH_HERE}}'\r\n  private version = '{{POST_BUILD_ENTERS_VERSION_HERE}}'\r\n\r\n  // Private properties\r\n  private newVersionAvailable: boolean = false\r\n  private versionCheckInterval: Subscription\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  /**\r\n   * Starts the version check interval for the specified frequency.\r\n   * @param config The configuration parameters for the notification function and version check frequency.\r\n   */\r\n  public startVersionChecking(config: IVersionCheck = { notification: null, frequency: 1800000 }) {\r\n    this.checkVersion(config.notification).then(() => {\r\n      if (!this.newVersionAvailable) {\r\n        this.versionCheckInterval = interval(config.frequency).subscribe(() => {\r\n          this.checkVersion(config.notification)\r\n        })\r\n      }\r\n    });\r\n  }\r\n\r\n  /** Stops the version check interval. */\r\n  public stopVersionChecking() {\r\n    if (this.versionCheckInterval) {\r\n      this.versionCheckInterval.unsubscribe()\r\n    }\r\n  }\r\n\r\n  /** Will do the call and check if the hash has changed or not. */\r\n  private checkVersion(notification: any): Promise<void> {\r\n    // Timestamp these requests to invalidate caches\r\n    return this.http.get(`version.json?t=${new Date().getTime()}`).toPromise().then((response: any) => {\r\n      this.newVersionAvailable = this.hasHashChanged(this.currentHash, response.hash)\r\n\r\n      // Stop checking for a new version if a new version is already available\r\n      if (this.newVersionAvailable) {\r\n        this.stopVersionChecking()\r\n\r\n        // Call the consuming client's notification method if one exists\r\n        if (notification) notification()\r\n      }\r\n    }).catch(err => {\r\n      console.error(err, 'Error checking version')\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Checks if hash has changed.\r\n   * This file has the JS hash, if it is a different one than in the version.json\r\n   * we are dealing with version change\r\n   * @param currentHash The current hash of the application.\r\n   * @param newHash The new application hash from the version.json file.\r\n   * @returns Boolean value determining if the hash has changed between the application and version.json file.\r\n   */\r\n  private hasHashChanged(currentHash, newHash): boolean {\r\n    if (!currentHash || currentHash === '{{POST_BUILD_ENTERS_HASH_HERE}}') {\r\n      return false\r\n    }\r\n\r\n    return currentHash !== newHash\r\n  }\r\n\r\n  /** The current build hash of the application */\r\n  get Hash(): string {\r\n    return this.currentHash\r\n  }\r\n\r\n  /** The current version number of the application */\r\n  get Version(): string {\r\n    return this.version\r\n  }\r\n\r\n  /** Flag showing if a new version of the application is available. */\r\n  get NewVersionAvailable(): boolean {\r\n    return this.newVersionAvailable\r\n  }\r\n}\r\n","/*\r\n * Public API Surface of version-check\r\n */\r\n\r\nexport * from './lib/version-check.service'\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":";;;;AAAA;;;;MAmBa,mBAAmB;IAS9B,YAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;;QAP5B,gBAAW,GAAG,iCAAiC,CAAA;QAC/C,YAAO,GAAG,oCAAoC,CAAA;;QAG9C,wBAAmB,GAAY,KAAK,CAAA;KAGH;;;;;IAMlC,oBAAoB,CAAC,SAAwB,EAAE,YAAY,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE;QAC5F,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC;YAC1C,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE;gBAC7B,IAAI,CAAC,oBAAoB,GAAG,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC;oBAC/D,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,YAAY,CAAC,CAAA;iBACvC,CAAC,CAAA;aACH;SACF,CAAC,CAAC;KACJ;;IAGM,mBAAmB;QACxB,IAAI,IAAI,CAAC,oBAAoB,EAAE;YAC7B,IAAI,CAAC,oBAAoB,CAAC,WAAW,EAAE,CAAA;SACxC;KACF;;IAGO,YAAY,CAAC,YAAiB;;QAEpC,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,kBAAkB,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,CAAC,QAAa;YAC5F,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,WAAW,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAA;;YAG/E,IAAI,IAAI,CAAC,mBAAmB,EAAE;gBAC5B,IAAI,CAAC,mBAAmB,EAAE,CAAA;;gBAG1B,IAAI,YAAY;oBAAE,YAAY,EAAE,CAAA;aACjC;SACF,CAAC,CAAC,KAAK,CAAC,GAAG;YACV,OAAO,CAAC,KAAK,CAAC,GAAG,EAAE,wBAAwB,CAAC,CAAA;SAC7C,CAAC,CAAA;KACH;;;;;;;;;IAUO,cAAc,CAAC,WAAW,EAAE,OAAO;QACzC,IAAI,CAAC,WAAW,IAAI,WAAW,KAAK,iCAAiC,EAAE;YACrE,OAAO,KAAK,CAAA;SACb;QAED,OAAO,WAAW,KAAK,OAAO,CAAA;KAC/B;;IAGD,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,WAAW,CAAA;KACxB;;IAGD,IAAI,OAAO;QACT,OAAO,IAAI,CAAC,OAAO,CAAA;KACpB;;IAGD,IAAI,mBAAmB;QACrB,OAAO,IAAI,CAAC,mBAAmB,CAAA;KAChC;;;;YAlFF,UAAU,SAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;YAbQ,UAAU;;;ACLnB;;;;ACAA;;;;;;"}